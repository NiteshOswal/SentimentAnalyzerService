#!/usr/bin/env node

var program = require('vorpal')(),
    cp = require('child_process'),
    path = require('path'),
    modules = require('../cli'),
    def = require('../package.json');

program
    .command('process <topic> [count]', 'Do everything!')
    .action(function(args, callback) {
        var worker = cp.fork(path.join(__dirname, "../lib/worker"), [JSON.stringify({topic: args.topic, count: args.count})]);
        worker.on("message", (m) => {
            if(m == "exit") {
                worker.send("exit");
                callback();
            }
        });
    });
program
    .command('collect <topic> [count]', 'Collect data on a topic from Twitter API and dumps it locally')
    .action(function(args, callback) {
        modules.collect(args.topic, parseInt(args.count), callback);
    });

program
    .command('preprocess <topic> [date]', 'Preprocess data for visualizations later')
    .action(function(args, callback) {
        modules.preprocess(args.topic, args.date, callback);
    })

program
    .command('synthesize <topic> [date]', 'Synthesize topic to find the final rating!')
    .action(function(args, callback) {
        modules.synthesize(args.topic, args.date, callback);
    });

program
    .command('ngram <topic> <n>', 'Find top n ngrams')
    .action(function(args, callback) {
        modules.ngram(args.topic, parseInt(args.n), callback);
    });
program
    .command('flush [topic] [date]', 'Flush blobs and tokens for a topic')
    .action(function(args, callback) {
        var self = this;
        var q = "Are you sure you want to flush all the contents?";
        if(!!args.topic) {
            q = `Are you sure you want to flush contents for "${args.topic}"?`;
        }
        return this.prompt({
            type: 'confirm',
            'name': 'continue',
            default: false,
            message: q
        }, function(result) {
            if(!result.continue) {
                self.log("Not flushing anything!");
            } else {
                self.log(args);
                modules.flush(args.topic, args.date, callback);
            }
        });
    });

program
    .command('history', 'Shows the blobs already downloaded')
    .action(function(args, callback) {
        modules.history(callback);
    })

program
    .delimiter(def.name + "$")
    .show();
