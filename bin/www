#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var lib = require('../lib');
var cli = require('../cli');
var debug = require('debug')('sas:server');
var http = require('http');
var webSocketServer = require('websocket').server;
var cp = require('child_process');
var path = require('path');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var wsServer = new webSocketServer({
  httpServer: server,
  fragmentOutgoingMessages: false
});
wsServer.on('request', function(req){
  var connection = req.accept('ws-api', req.origin);
  console.log('connected');
  connection.on('close', function(){});
  connection.on('message', function(message){
    if(message.type === 'utf8'){
      var query = JSON.parse(message.utf8Data);
      var delay = 0;
      if(query.method === 'collect') {
        lib.collect(
          query.topic,
          parseInt(query.count),
          (data) => {
            var msg = {type:"data",data:data};
            connection.sendUTF(JSON.stringify(msg));
          },
          (err) => {
            var msg = {type:"error", data:err};
            connection.sendUTF(JSON.stringify(msg));
          },
          (data) => {
            var msg = {type:"end", data:data};
            connection.sendUTF(JSON.stringify(msg));
            console.log("Message Sent(collect): "+JSON.stringify(msg));
          }
        );
      }
      if(query.method === 'preprocess') {
        lib.preprocess(
          query.topic,
          query.date,
          (data) => {
            delay++;
            var msg = {type:"data",data:delay};
            if(delay === 100){
              connection.sendUTF(JSON.stringify(msg));
              delay = 0;
            }
          },
          (err) => {
            var msg = {type:"error", data:err};
            connection.sendUTF(JSON.stringify(msg));
          },
          (data) => {
            var msg = {type:"end"};
            connection.sendUTF(JSON.stringify(msg));
            console.log("Message Sent(preprocess): "+JSON.stringify(msg));
            delay = 0;
          }
        );
      }
      if(query.method === 'synthesize') {
        lib.synthesize(
          query.topic,
          query.date,
          (data) => {
            delay++;
            var msg = {type:"data",data:delay};
            if(delay === 100){
              connection.sendUTF(JSON.stringify(msg));
              delay = 0;
            }
          },
          (err) => {
            var msg = {type:"error", data:err};
            connection.sendUTF(JSON.stringify(msg));
          },
          (data) => {
            var msg = {type:"end", data:data};
            connection.sendUTF(JSON.stringify(msg));
            console.log("Message Sent(synthesize): "+JSON.stringify(msg));
          }
        );
      }
    }
  });
});
